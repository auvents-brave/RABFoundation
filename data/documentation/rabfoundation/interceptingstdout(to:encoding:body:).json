{"sections":[],"variants":[{"paths":["\/documentation\/rabfoundation\/interceptingstdout(to:encoding:body:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/RabFoundation\/documentation\/RabFoundation\/InterceptingStdOut(to:encoding:body:)","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/RabFoundation\/documentation\/RabFoundation"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InterceptingStdOut","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"output","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" any "},{"preciseIdentifier":"s:s16TextOutputStreamP","kind":"typeIdentifier","text":"TextOutputStream"},{"kind":"text","text":", "},{"kind":"externalParam","text":"encoding"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":"."},{"preciseIdentifier":"s:SS10FoundationE8EncodingV","text":"Encoding","kind":"typeIdentifier"},{"text":" = .utf8, ","kind":"text"},{"text":"body","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]}]},{"kind":"parameters","parameters":[{"name":"output","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An output stream to receive the standard output text"}]}]},{"name":"encoding","content":[{"inlineContent":[{"text":"The encoding to use when converting standard output into text.","type":"text"}],"type":"paragraph"}]},{"name":"body","content":[{"type":"paragraph","inlineContent":[{"text":"A closure that is executed immediately.","type":"text"}]}]}]},{"content":[{"text":"Return Value","anchor":"return-value","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The return value, if any, of the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" closure."}]}],"kind":"content"},{"content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"Example usage:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var output: any TextOutputStream = \"\"","await InterceptingStdOut(to: &output) {","      FunctionUsingPrintToTraceThings()","}","#expect((output as! String).contains(\"wWhatever you expect to read in stdoutput\"))"]}],"kind":"content"}],"metadata":{"externalID":"s:13RabFoundation18InterceptingStdOut2to8encoding4bodyxs16TextOutputStream_pz_SS0B0E8EncodingVxyXEtYalF","modules":[{"name":"RabFoundation"}],"symbolKind":"func","roleHeading":"Function","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InterceptingStdOut","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" any ","kind":"text"},{"text":"TextOutputStream","kind":"typeIdentifier","preciseIdentifier":"s:s16TextOutputStreamP"},{"text":", ","kind":"text"},{"text":"encoding","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":".","kind":"text"},{"text":"Encoding","kind":"typeIdentifier","preciseIdentifier":"s:SS10FoundationE8EncodingV"},{"text":", ","kind":"text"},{"text":"body","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"title":"InterceptingStdOut(to:encoding:body:)","role":"symbol"},"abstract":[{"type":"text","text":"Additionally writes any data written to standard output into the given"},{"type":"text","text":" "},{"type":"text","text":"output stream."}],"references":{"doc://RabFoundation/documentation/RabFoundation":{"identifier":"doc:\/\/RabFoundation\/documentation\/RabFoundation","abstract":[{"type":"text","text":"A small pure and cross-platform Swift library (usable on Windows or WebAssembly for example). Without any specific context, it just includes reusable code, covering very different topics."}],"role":"collection","type":"topic","kind":"symbol","title":"RabFoundation","url":"\/documentation\/rabfoundation"},"doc://RabFoundation/documentation/RabFoundation/InterceptingStdOut(to:encoding:body:)":{"url":"\/documentation\/rabfoundation\/interceptingstdout(to:encoding:body:)","role":"symbol","abstract":[{"type":"text","text":"Additionally writes any data written to standard output into the given"},{"type":"text","text":" "},{"type":"text","text":"output stream."}],"title":"InterceptingStdOut(to:encoding:body:)","identifier":"doc:\/\/RabFoundation\/documentation\/RabFoundation\/InterceptingStdOut(to:encoding:body:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InterceptingStdOut","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" any ","kind":"text"},{"preciseIdentifier":"s:s16TextOutputStreamP","text":"TextOutputStream","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"encoding","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:SS10FoundationE8EncodingV","text":"Encoding","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"body","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol"}}}