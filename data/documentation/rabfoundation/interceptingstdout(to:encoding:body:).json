{"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InterceptingStdOut","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"output","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" any "},{"kind":"typeIdentifier","text":"TextOutputStream","preciseIdentifier":"s:s16TextOutputStreamP"},{"kind":"text","text":", "},{"kind":"externalParam","text":"encoding"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Encoding","preciseIdentifier":"s:SS10FoundationE8EncodingV"},{"kind":"text","text":" = .utf8, "},{"kind":"externalParam","text":"body"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An output stream to receive the standard output text"}]}],"name":"output"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The encoding to use when converting standard output into text.","type":"text"}]}],"name":"encoding"},{"content":[{"type":"paragraph","inlineContent":[{"text":"A closure that is executed immediately.","type":"text"}]}],"name":"body"}],"kind":"parameters"},{"content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"The return value, if any, of the ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" closure.","type":"text"}]}],"kind":"content"},{"content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Example usage:"}],"type":"paragraph"},{"code":["var output: any TextOutputStream = \"\"","await InterceptingStdOut(to: &output) {","      FunctionUsingPrintToTraceThings()","}","#expect((output as! String).contains(\"wWhatever you expect to read in stdoutput\"))"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/rabfoundation\/interceptingstdout(to:encoding:body:)"]}],"sections":[],"identifier":{"url":"doc:\/\/RabFoundation\/documentation\/RabFoundation\/InterceptingStdOut(to:encoding:body:)","interfaceLanguage":"swift"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/RabFoundation\/documentation\/RabFoundation"]]},"metadata":{"externalID":"s:13RabFoundation18InterceptingStdOut2to8encoding4bodyxs16TextOutputStream_pz_SS0B0E8EncodingVxyXEtYalF","title":"InterceptingStdOut(to:encoding:body:)","role":"symbol","modules":[{"name":"RabFoundation"}],"roleHeading":"Function","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InterceptingStdOut","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" any ","kind":"text"},{"preciseIdentifier":"s:s16TextOutputStreamP","text":"TextOutputStream","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"encoding","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:SS10FoundationE8EncodingV","text":"Encoding","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"body","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"symbolKind":"func"},"abstract":[{"type":"text","text":"Additionally writes any data written to standard output into the given"},{"type":"text","text":" "},{"type":"text","text":"output stream."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://RabFoundation/documentation/RabFoundation/InterceptingStdOut(to:encoding:body:)":{"abstract":[{"type":"text","text":"Additionally writes any data written to standard output into the given"},{"type":"text","text":" "},{"type":"text","text":"output stream."}],"role":"symbol","title":"InterceptingStdOut(to:encoding:body:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InterceptingStdOut","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" any ","kind":"text"},{"text":"TextOutputStream","kind":"typeIdentifier","preciseIdentifier":"s:s16TextOutputStreamP"},{"text":", ","kind":"text"},{"text":"encoding","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":".","kind":"text"},{"text":"Encoding","kind":"typeIdentifier","preciseIdentifier":"s:SS10FoundationE8EncodingV"},{"text":", ","kind":"text"},{"text":"body","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/rabfoundation\/interceptingstdout(to:encoding:body:)","identifier":"doc:\/\/RabFoundation\/documentation\/RabFoundation\/InterceptingStdOut(to:encoding:body:)","type":"topic","kind":"symbol"},"doc://RabFoundation/documentation/RabFoundation":{"role":"collection","kind":"symbol","url":"\/documentation\/rabfoundation","title":"RabFoundation","identifier":"doc:\/\/RabFoundation\/documentation\/RabFoundation","abstract":[{"type":"text","text":"A small pure and cross-platform Swift library (usable on Windows or WebAssembly for example). Without any specific context, it just includes reusable code, covering very different topics."}],"type":"topic"}}}