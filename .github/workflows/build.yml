name: CI
permissions:
  contents: read
on:
  workflow_dispatch:
  #push:
  #  branches:
  #pull_request:
  #  branches:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  SWIFT_VERSION: '6.2'
jobs:
  build-swift-matrix:
    name: 'Native ${{ matrix.name }}'
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macOS 26
            runner: macos-26
            skip: false
          - name: macOS 15
            runner: macos-15
            skip: true
          - name: Ubuntu 22.04 LTS
            runner: ubuntu-22.04
            skip: true
          - name: Ubuntu 24.04 LTS
            runner: ubuntu-24.04
            skip: true
    steps:
      - uses: actions/checkout@v4

      - name: Check Swift Version
        run: swift --version

      - name: Install Swiftly (macOS)
        if: runner.os == 'macOS'
        run: |
          curl -O https://download.swift.org/swiftly/darwin/swiftly.pkg
          installer -pkg swiftly.pkg -target CurrentUserHomeDirectory
          ~/.swiftly/bin/swiftly init --quiet-shell-followup
          . "${SWIFTLY_HOME_DIR:-$HOME/.swiftly}/env.sh"
          hash -r
          #
          # Get Swift binary path and persist it for future steps
          echo "${SWIFTLY_HOME_DIR:-$HOME/.swiftly}/bin" >> $GITHUB_PATH

      - name: Install dependencies
        if: runner.os == 'Ubuntu'
        run: |
          sudo apt-get -y install libcurl4-openssl-dev

      - name: Install Swiftly (Ubuntu)
        if: runner.os == 'Ubuntu'
        run: |
          curl -O https://download.swift.org/swiftly/linux/swiftly-$(uname -m).tar.gz
          tar zxf swiftly-$(uname -m).tar.gz
          ./swiftly init --quiet-shell-followup
          #
          # Get Swift binary path and persist it for future steps
          source "${SWIFTLY_HOME_DIR:-$HOME/.local/share/swiftly}/env.sh"
          echo "${SWIFTLY_HOME_DIR:-$HOME/.local/share/swiftly}/bin" >> $GITHUB_PATH

      - name: Set system timezone to Europe/London
        if: runner.os == 'Ubuntu'
        run: |
          sudo ln -sf /usr/share/zoneinfo/Europe/London /etc/localtime
          sudo dpkg-reconfigure -f noninteractive tzdata

      - name: Set locale to en_GB.UTF-8
        if: runner.os == 'Ubuntu'
        run: |
          sudo apt-get update
          sudo apt-get install -y locales
          sudo locale-gen en_GB.UTF-8
          sudo update-locale LANG=en_GB.UTF-8
          export LANG=en_GB.UTF-8


      - name: Check Swift Version
        run: swift --version
        
      - name: Skipped target warning
        if: matrix.skip == true
        run: 'echo "::warning::''${{ matrix.name }}'' is ignored for the moment."'
      - name: Setup Swift
        if: matrix.skip != true && matrix.runner != 'macos-26'
        uses: swift-actions/setup-swift@next #@v2.3.0
        with:
          swift-version: '${{ env.SWIFT_VERSION }}'
      - name: Check Swift Version
        run: swift --version

      - name: Build
        if: matrix.skip != true
        run: swift build
      - name: Run Tests
        if: matrix.skip != true
        run: swift test
  build-xcodebuild-matrix:
    name: '${{ matrix.name }}'
    runs-on: ${{ matrix.name == 'visionOS Simulator' && 'macos-latest-arm64' || 'macos-26' }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: iOS Simulator
            sdk: iphonesimulator
            destination: 'platform=iOS Simulator,name=iPhone 16,OS=18.5'
            run_tests: true
            skip: true
          - name: tvOS Simulator
            sdk: appletvsimulator
            destination: >-
              platform=tvOS Simulator,name=Apple TV 4K (3rd generation) (at 1080p),OS=18.5
            run_tests: true
            skip: true
          - name: watchOS Simulator (Build only)
            sdk: watchsimulator
            destination: 'platform=watchOS Simulator,name=Apple Watch Ultra 2 (49mm),OS=11.5'
            run_tests: false
            skip: true
          - name: visionOS Simulator
            sdk: xrssimulator
            destination: 'platform=visionOS Simulator,name=Apple Vision Pro,OS=1.0'
            run_tests: false
            skip: true
          - name: macCatalyst
            sdk: macosx
            destination: 'platform=macOS,variant=Mac Catalyst'
            run_tests: true
            skip: true
    steps:
      - uses: actions/checkout@v4
      - name: Skipped target warning
        if: matrix.skip == true
        run: 'echo "::warning::''${{ matrix.name }}'' is ignored for the moment."'
      - name: Setup Swift
        if: matrix.skip != true && matrix.runner != 'macos-26'
        uses: swift-actions/setup-swift@next #@v2.3.0
        with:
          swift-version: '${{ env.SWIFT_VERSION }}'
      - name: Check Swift Version
        run: swift --version

      - name: Build
        if: matrix.skip != true
        working-directory: ${{ github.workspace }}
        run: >
          xcodebuild
          -scheme rab-foundation
          -configuration Release
          -sdk ${{ matrix.sdk }}
          -destination '${{ matrix.destination }}'
      - name: Run Tests
        if: matrix.run_tests == true && matrix.skip != true
        working-directory: ${{ github.workspace }}
        run: >
          xcodebuild
          -scheme rab-foundation
          -configuration Debug
          -sdk ${{ matrix.sdk }}
          -destination '${{ matrix.destination }}'
          -enableCodeCoverage NO
          -parallel-testing-enabled YES
          -quiet
          test
  build-windows:
    name: Windows (6.2)
    runs-on: windows-2025
    steps:
      - uses: actions/checkout@v4
      - name: Setup Swift
        uses: compnerd/gha-setup-swift@main
        with:
          branch: swift-6.2-release
          tag: 6.2-RELEASE
      - name: Check Swift Version
        run: swift --version
      - name: Build
        run: swift build
      - name: Run Tests
        run: swift test